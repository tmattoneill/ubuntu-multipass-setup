#!/usr/bin/env bash

# Module Template for Ubuntu Server Setup Script
# Use this template to create new modules with consistent structure and patterns
#
# Module: TEMPLATE_NAME
# Description: TEMPLATE_DESCRIPTION
# Dependencies: TEMPLATE_DEPENDENCIES

set -euo pipefail

# Source dependencies
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
source "${SCRIPT_DIR}/config.sh"
source "${SCRIPT_DIR}/lib/logging.sh"
source "${SCRIPT_DIR}/lib/utils.sh"
source "${SCRIPT_DIR}/lib/validation.sh"
source "${SCRIPT_DIR}/lib/security.sh"

# Module configuration
readonly MODULE_NAME="template"
readonly MODULE_DESCRIPTION="Template module for consistent development"

# Module-specific configuration (customize as needed)
readonly TEMPLATE_PACKAGES=(
    "package1"
    "package2"
    "package3"
)

readonly TEMPLATE_CONFIG_DIR="/etc/template"
readonly TEMPLATE_LOG_FILE="${LOG_DIR}/template-install.log"

# Pre-installation checks
check_prerequisites() {
    log_info "Checking prerequisites for $MODULE_NAME module..."
    
    # Check if module is already installed/configured
    if command_exists "template_command"; then
        log_info "$MODULE_NAME already installed, checking version..."
        local current_version
        current_version=$(template_command --version 2>/dev/null | head -1 || echo "unknown")
        log_info "Current version: $current_version"
        
        # Decide whether to skip or upgrade
        if prompt_user "Reinstall/reconfigure $MODULE_NAME?"; then
            log_info "Proceeding with reinstallation"
        else
            log_info "Skipping $MODULE_NAME installation"
            return 1
        fi
    fi
    
    # Check system requirements
    if ! validate_ubuntu_version; then
        log_error "$MODULE_NAME requires Ubuntu ${MIN_UBUNTU_VERSION} or newer"
        return 1
    fi
    
    # Check available disk space (if needed)
    local required_space_mb=100  # Customize as needed
    if ! check_disk_space "$required_space_mb"; then
        log_error "Insufficient disk space for $MODULE_NAME (${required_space_mb}MB required)"
        return 1
    fi
    
    # Check network connectivity (if needed)
    if ! validate_internet_connection; then
        log_error "Internet connection required for $MODULE_NAME installation"
        return 1
    fi
    
    log_success "Prerequisites check completed for $MODULE_NAME"
    return 0
}

# Install packages
install_packages() {
    log_info "Installing packages for $MODULE_NAME..."
    
    # Update package index if needed
    if ! update_package_index; then
        log_error "Failed to update package index"
        return 1
    fi
    
    # Install packages
    for package in "${TEMPLATE_PACKAGES[@]}"; do
        log_info "Installing package: $package"
        
        if install_package "$package"; then
            log_success "Package installed: $package"
        else
            log_error "Failed to install package: $package"
            return 1
        fi
    done
    
    log_success "Package installation completed for $MODULE_NAME"
    return 0
}

# Configure the module
configure_module() {
    log_info "Configuring $MODULE_NAME..."
    
    # Create configuration directory
    if create_directory "$TEMPLATE_CONFIG_DIR"; then
        log_info "Configuration directory created: $TEMPLATE_CONFIG_DIR"
    else
        log_error "Failed to create configuration directory: $TEMPLATE_CONFIG_DIR"
        return 1
    fi
    
    # Create configuration files
    log_info "Creating configuration files..."
    
    # Example configuration file
    cat > "${TEMPLATE_CONFIG_DIR}/config.conf" << EOF
# Configuration file for $MODULE_NAME
# Generated by Ubuntu Server Setup Script
# $(date)

[general]
enabled = true
log_level = info
log_file = $TEMPLATE_LOG_FILE

[template_section]
option1 = value1
option2 = value2
EOF
    
    # Set proper permissions
    chmod 644 "${TEMPLATE_CONFIG_DIR}/config.conf"
    chown root:root "${TEMPLATE_CONFIG_DIR}/config.conf"
    
    log_success "Configuration files created for $MODULE_NAME"
    return 0
}

# Set up systemd service (if applicable)
setup_service() {
    log_info "Setting up systemd service for $MODULE_NAME..."
    
    # Create systemd service file
    cat > "/etc/systemd/system/template.service" << EOF
[Unit]
Description=Template Service
After=network.target
Wants=network.target

[Service]
Type=simple
User=template
Group=template
ExecStart=/usr/bin/template-daemon
ExecReload=/bin/kill -HUP \$MAINPID
Restart=always
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF
    
    # Reload systemd and enable service
    systemctl daemon-reload
    
    if enable_service "template"; then
        log_success "Service enabled: template"
    else
        log_error "Failed to enable service: template"
        return 1
    fi
    
    return 0
}

# Create users and groups (if needed)
setup_users() {
    log_info "Setting up users and groups for $MODULE_NAME..."
    
    # Create system group
    if ! getent group template >/dev/null 2>&1; then
        if groupadd --system template; then
            log_success "Created system group: template"
        else
            log_error "Failed to create system group: template"
            return 1
        fi
    fi
    
    # Create system user
    if ! id template >/dev/null 2>&1; then
        if useradd --system --gid template --home-dir /var/lib/template \
                   --shell /bin/false --comment "Template Service User" template; then
            log_success "Created system user: template"
        else
            log_error "Failed to create system user: template"
            return 1
        fi
    fi
    
    # Create home directory
    if create_directory "/var/lib/template"; then
        chown template:template /var/lib/template
        chmod 755 /var/lib/template
        log_success "Created home directory for template user"
    fi
    
    return 0
}

# Set up log rotation
setup_log_rotation() {
    log_info "Setting up log rotation for $MODULE_NAME..."
    
    cat > "/etc/logrotate.d/template" << EOF
$TEMPLATE_LOG_FILE {
    daily
    missingok
    rotate 30
    compress
    delaycompress
    notifempty
    create 644 template template
    postrotate
        systemctl reload template >/dev/null 2>&1 || true
    endscript
}
EOF
    
    log_success "Log rotation configured for $MODULE_NAME"
    return 0
}

# Validate installation
validate_installation() {
    log_info "Validating $MODULE_NAME installation..."
    
    # Check if command exists
    if ! command_exists "template_command"; then
        log_error "$MODULE_NAME command not found"
        return 1
    fi
    
    # Check if service is running (if applicable)
    if ! systemctl is-active --quiet template; then
        log_warning "$MODULE_NAME service is not running"
        # Attempt to start the service
        if start_service "template"; then
            log_success "$MODULE_NAME service started"
        else
            log_error "Failed to start $MODULE_NAME service"
            return 1
        fi
    fi
    
    # Check configuration files
    if [[ ! -f "${TEMPLATE_CONFIG_DIR}/config.conf" ]]; then
        log_error "$MODULE_NAME configuration file not found"
        return 1
    fi
    
    # Test functionality (customize as needed)
    log_info "Testing $MODULE_NAME functionality..."
    if template_command --test >/dev/null 2>&1; then
        log_success "$MODULE_NAME functionality test passed"
    else
        log_warning "$MODULE_NAME functionality test failed"
    fi
    
    log_success "$MODULE_NAME installation validation completed"
    return 0
}

# Cleanup function for failed installations
cleanup_on_failure() {
    log_warning "Cleaning up after failed $MODULE_NAME installation..."
    
    # Stop service if running
    systemctl stop template >/dev/null 2>&1 || true
    
    # Remove configuration files
    rm -rf "$TEMPLATE_CONFIG_DIR" 2>/dev/null || true
    
    # Remove systemd service file
    rm -f "/etc/systemd/system/template.service" 2>/dev/null || true
    systemctl daemon-reload >/dev/null 2>&1 || true
    
    # Remove users (optional - might want to keep for troubleshooting)
    # userdel template >/dev/null 2>&1 || true
    # groupdel template >/dev/null 2>&1 || true
    
    log_info "Cleanup completed for $MODULE_NAME"
}

# Main installation function
main() {
    log_section "Module: $MODULE_DESCRIPTION"
    
    # Set up error handling
    trap 'cleanup_on_failure' ERR
    
    # Check if we should skip this module
    if [[ "${DRY_RUN:-false}" == "true" ]]; then
        log_info "[DRY RUN] Would install and configure $MODULE_NAME"
        return 0
    fi
    
    # Run installation steps
    if ! check_prerequisites; then
        log_info "Prerequisites not met, skipping $MODULE_NAME"
        return 0
    fi
    
    install_packages
    configure_module
    setup_users         # Comment out if not needed
    setup_service       # Comment out if not needed
    setup_log_rotation  # Comment out if not needed
    validate_installation
    
    # Clear error trap on success
    trap - ERR
    
    log_success "$MODULE_NAME module installation completed successfully"
    
    # Display post-installation information
    cat << EOF

=== $MODULE_NAME Installation Summary ===
Configuration: $TEMPLATE_CONFIG_DIR
Logs: $TEMPLATE_LOG_FILE
Service: template.service
User: template
Group: template

Next steps:
1. Review configuration: ${TEMPLATE_CONFIG_DIR}/config.conf
2. Check service status: systemctl status template
3. View logs: tail -f $TEMPLATE_LOG_FILE

EOF
}

# Execute main function if script is run directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi