#!/usr/bin/env bash

# Module: Nginx Web Server
# Install and configure Nginx with security hardening

set -euo pipefail

# Source dependencies
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
source "${SCRIPT_DIR}/config.sh"
source "${SCRIPT_DIR}/lib/logging.sh"
source "${SCRIPT_DIR}/lib/utils.sh"
source "${SCRIPT_DIR}/lib/validation.sh"
source "${SCRIPT_DIR}/lib/security.sh"

# Module configuration
readonly MODULE_NAME="nginx"
readonly MODULE_DESCRIPTION="Nginx Web Server Setup"

main() {
    log_section "Module: $MODULE_DESCRIPTION"
    
    install_nginx
    configure_nginx
    create_directory_structure
    configure_security_settings
    create_default_sites
    configure_log_rotation
    start_and_enable_nginx
    
    log_success "Nginx web server module completed successfully"
}

# Install Nginx
install_nginx() {
    log_subsection "Installing Nginx"
    
    # Add official Nginx repository
    add_nginx_repository
    
    # Install Nginx
    if package_installed "nginx"; then
        log_debug "Nginx is already installed"
        local nginx_version
        nginx_version=$(nginx -v 2>&1 | awk -F'/' '{print $2}')
        log_info "Nginx version: $nginx_version"
    else
        log_info "Installing Nginx..."
        if DEBIAN_FRONTEND=noninteractive apt-get install -y nginx > /dev/null 2>&1; then
            log_success "Nginx installed successfully"
        else
            log_error "Failed to install Nginx"
            return 1
        fi
    fi
    
    # Verify Nginx installation
    verify_nginx_installation
}

# Add official Nginx repository
add_nginx_repository() {
    log_info "Adding official Nginx repository"
    
    # Check if repository is already added
    if grep -q "nginx.org" /etc/apt/sources.list.d/*.list 2>/dev/null; then
        log_debug "Nginx repository already added"
        return 0
    fi
    
    # Add Nginx signing key
    local nginx_key_url="https://nginx.org/keys/nginx_signing.key"
    local nginx_key_file="/tmp/nginx_signing.key"
    
    if download_file "$nginx_key_url" "$nginx_key_file"; then
        apt-key add "$nginx_key_file" > /dev/null 2>&1
        rm -f "$nginx_key_file"
        log_success "Nginx signing key added"
    else
        log_warn "Failed to add Nginx signing key, using distribution package"
        return 0
    fi
    
    # Add repository
    local codename
    codename=$(lsb_release -sc)
    echo "deb $NGINX_REPO $codename nginx" > /etc/apt/sources.list.d/nginx.list
    
    # Update package lists
    apt-get update > /dev/null 2>&1
    log_success "Nginx repository added"
}

# Verify Nginx installation
verify_nginx_installation() {
    log_debug "Verifying Nginx installation"
    
    if ! command_exists "nginx"; then
        log_error "Nginx command not found after installation"
        return 1
    fi
    
    local nginx_version
    nginx_version=$(nginx -v 2>&1 | awk -F'/' '{print $2}')
    log_success "Nginx verified: $nginx_version"
    
    return 0
}

# Configure Nginx
configure_nginx() {
    log_subsection "Configuring Nginx"
    
    # Backup original configuration
    backup_nginx_config
    
    # Create main configuration
    create_main_config
    
    # Create additional configuration files
    create_additional_configs
    
    # Test configuration
    test_nginx_config
}

# Backup Nginx configuration
backup_nginx_config() {
    log_info "Backing up Nginx configuration"
    
    local nginx_conf="/etc/nginx/nginx.conf"
    if [[ -f "$nginx_conf" ]]; then
        backup_file "$nginx_conf"
        log_success "Nginx configuration backed up"
    fi
}

# Create main Nginx configuration
create_main_config() {
    log_info "Creating main Nginx configuration"
    
    local nginx_conf="/etc/nginx/nginx.conf"
    
    cat > "$nginx_conf" << EOF
# Nginx configuration generated by setup script
user $NGINX_USER;
worker_processes $NGINX_WORKER_PROCESSES;
pid /var/run/nginx.pid;

# Load dynamic modules
include /etc/nginx/modules-enabled/*.conf;

events {
    worker_connections $NGINX_WORKER_CONNECTIONS;
    use epoll;
    multi_accept on;
}

http {
    ##
    # Basic Settings
    ##
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout $NGINX_KEEPALIVE_TIMEOUT;
    types_hash_max_size 2048;
    client_max_body_size $NGINX_CLIENT_MAX_BODY_SIZE;
    
    # Hide server version
    server_tokens off;
    
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    ##
    # SSL Settings
    ##
    ssl_protocols $SSL_PROTOCOLS;
    ssl_prefer_server_ciphers on;
    ssl_ciphers '$SSL_CIPHERS';
    ssl_session_cache $SSL_SESSION_CACHE;
    ssl_session_timeout $SSL_SESSION_TIMEOUT;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    ##
    # Logging Settings
    ##
    log_format main '\$remote_addr - \$remote_user [\$time_local] "\$request" '
                    '\$status \$body_bytes_sent "\$http_referer" '
                    '"\$http_user_agent" "\$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;
    
    ##
    # Gzip Settings
    ##
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    ##
    # Rate Limiting
    ##
    limit_req_zone \$binary_remote_addr zone=login:10m rate=10r/m;
    limit_req_zone \$binary_remote_addr zone=api:10m rate=100r/m;
    limit_req_zone \$binary_remote_addr zone=general:10m rate=1r/s;
    
    ##
    # Security Headers
    ##
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Referrer-Policy "strict-origin-when-cross-origin";
    
    ##
    # Virtual Host Configs
    ##
    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;
}
EOF
    
    # Set proper permissions
    chmod 644 "$nginx_conf"
    
    log_success "Main Nginx configuration created"
}

# Create additional configuration files
create_additional_configs() {
    log_info "Creating additional Nginx configurations"
    
    # Create security configuration
    create_security_config
    
    # Create SSL configuration
    create_ssl_config
    
    # Create performance configuration
    create_performance_config
}

# Create security configuration
create_security_config() {
    local security_conf="/etc/nginx/conf.d/security.conf"
    
    log_debug "Creating security configuration"
    
    cat > "$security_conf" << 'EOF'
# Security configuration (additional settings not in main nginx.conf)
# Note: server_tokens, security headers, client_max_body_size already set in nginx.conf
# Note: location blocks belong in server configurations, not conf.d includes

# Additional security settings for http block
# Prevent buffer overflow attacks  
client_body_buffer_size 1K;
client_header_buffer_size 1k;
large_client_header_buffers 2 1k;

# Rate limiting status codes
limit_req_status 429;
limit_conn_status 429;

# Additional security maps can be added here
# Most security directives are already configured in main nginx.conf
EOF
    
    chmod 644 "$security_conf"
    log_success "Security configuration created"
}

# Create SSL configuration
create_ssl_config() {
    local ssl_conf="/etc/nginx/conf.d/ssl.conf"
    
    log_debug "Creating SSL configuration"
    
    cat > "$ssl_conf" << EOF
# SSL configuration (additional settings not in main nginx.conf)
# Note: ssl_protocols, ssl_ciphers, ssl_prefer_server_ciphers already set in nginx.conf
# Note: ssl_session_cache, ssl_session_timeout, ssl_stapling already set in nginx.conf

# Additional SSL settings not in main config
ssl_session_tickets off;

# DH parameters (generate with: openssl dhparam -out /etc/nginx/dhparam.pem 2048)
# ssl_dhparam /etc/nginx/dhparam.pem;

# HSTS header (additional security header)
add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
EOF
    
    chmod 644 "$ssl_conf"
    log_success "SSL configuration created"
}

# Create performance configuration
create_performance_config() {
    local perf_conf="/etc/nginx/conf.d/performance.conf"
    
    log_debug "Creating performance configuration"
    
    cat > "$perf_conf" << 'EOF'
# Performance configuration for server blocks
# Note: Global directives like sendfile, gzip are already set in nginx.conf
# Note: Rate limiting zones (login, api) are already set in nginx.conf

# This file contains server-level performance settings that can be
# included in server blocks or used as global http-level includes

# Map for caching headers
map $sent_http_content_type $expires {
    default                    off;
    text/html                  1h;
    text/css                   1y;
    application/javascript     1y;
    ~image/                    1y;
}

# Additional performance maps can be added here
# Rate limiting zones are already configured in main nginx.conf
EOF
    
    chmod 644 "$perf_conf"
    log_success "Performance configuration created"
}

# Create directory structure
create_directory_structure() {
    log_subsection "Creating Nginx Directory Structure"
    
    # Create necessary directories
    local directories=(
        "/etc/nginx/sites-available"
        "/etc/nginx/sites-enabled"
        "/etc/nginx/conf.d"
        "/etc/nginx/ssl"
        "/var/www/html"
        "/var/www/default"
        "$WEBAPP_ROOT"
        "$WEBAPP_LOG_DIR"
    )
    
    for dir in "${directories[@]}"; do
        create_directory "$dir" "755" "root" "root"
    done
    
    # Set proper ownership for web directories
    chown -R "$NGINX_USER:$WEBAPP_GROUP" "$WEBAPP_ROOT"
    chown -R "$NGINX_USER:$WEBAPP_GROUP" "/var/www"
    
    # Set proper permissions for log directory
    chown -R "$NGINX_USER:adm" "$WEBAPP_LOG_DIR"
    chmod 755 "$WEBAPP_LOG_DIR"
    
    log_success "Nginx directory structure created"
}

# Configure security settings
configure_security_settings() {
    log_subsection "Configuring Nginx Security Settings"
    
    # Generate DH parameters for SSL
    generate_dh_parameters
    
    # Create custom error pages
    create_error_pages
    
    # Configure file permissions
    secure_nginx_files
}

# Generate DH parameters
generate_dh_parameters() {
    local dh_param_file="/etc/nginx/dhparam.pem"
    
    if [[ -f "$dh_param_file" ]]; then
        log_debug "DH parameters already exist"
        return 0
    fi
    
    log_info "Generating DH parameters (this may take a while)..."
    if openssl dhparam -out "$dh_param_file" 2048 > /dev/null 2>&1; then
        chmod 600 "$dh_param_file"
        log_success "DH parameters generated"
    else
        log_warn "Failed to generate DH parameters"
    fi
}

# Create custom error pages
create_error_pages() {
    log_info "Creating custom error pages"
    
    local error_dir="/var/www/errors"
    create_directory "$error_dir" "755" "$NGINX_USER" "$WEBAPP_GROUP"
    
    # Create 404 error page
    cat > "$error_dir/404.html" << 'EOF'
<!DOCTYPE html>
<html>
<head>
    <title>404 - Page Not Found</title>
    <style>
        body { font-family: Arial, sans-serif; text-align: center; margin-top: 50px; }
        h1 { color: #666; }
        p { color: #999; }
    </style>
</head>
<body>
    <h1>404 - Page Not Found</h1>
    <p>The requested page could not be found.</p>
</body>
</html>
EOF
    
    # Create 50x error page
    cat > "$error_dir/50x.html" << 'EOF'
<!DOCTYPE html>
<html>
<head>
    <title>Server Error</title>
    <style>
        body { font-family: Arial, sans-serif; text-align: center; margin-top: 50px; }
        h1 { color: #666; }
        p { color: #999; }
    </style>
</head>
<body>
    <h1>Server Error</h1>
    <p>The server encountered an internal error.</p>
</body>
</html>
EOF
    
    chown -R "$NGINX_USER:$WEBAPP_GROUP" "$error_dir"
    log_success "Custom error pages created"
}

# Secure Nginx files
secure_nginx_files() {
    log_info "Securing Nginx files"
    
    # Set proper permissions on configuration files
    chmod 644 /etc/nginx/nginx.conf
    chmod -R 644 /etc/nginx/conf.d/
    chmod -R 644 /etc/nginx/sites-available/
    
    # Secure SSL directory
    if [[ -d "/etc/nginx/ssl" ]]; then
        chmod 700 /etc/nginx/ssl
    fi
    
    log_success "Nginx files secured"
}

# Create default sites
create_default_sites() {
    log_subsection "Creating Default Sites"
    
    # Remove default site
    remove_default_site
    
    # Create new default site
    create_new_default_site
    
    # Create maintenance site
    create_maintenance_site
}

# Remove default site
remove_default_site() {
    log_info "Removing default Nginx site"
    
    local default_sites=("/etc/nginx/sites-enabled/default" "/etc/nginx/sites-available/default")
    
    for site in "${default_sites[@]}"; do
        if [[ -f "$site" ]] || [[ -L "$site" ]]; then
            rm -f "$site"
            log_debug "Removed: $site"
        fi
    done
    
    log_success "Default site removed"
}

# Create new default site
create_new_default_site() {
    log_info "Creating new default site configuration"
    
    local site_config="/etc/nginx/sites-available/default"
    
    cat > "$site_config" << 'EOF'
# Default server configuration
server {
    listen 80 default_server;
    listen [::]:80 default_server;
    
    root /var/www/default;
    index index.html index.htm index.nginx-debian.html;
    
    server_name _;
    
    # Security headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    
    # Rate limiting
    limit_req zone=general burst=5 nodelay;
    
    location / {
        try_files $uri $uri/ =404;
    }
    
    # Custom error pages
    error_page 404 /errors/404.html;
    error_page 500 502 503 504 /errors/50x.html;
    
    location /errors/ {
        root /var/www;
        internal;
    }
    
    # Deny access to hidden files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
}
EOF
    
    # Enable the site
    ln -sf "$site_config" "/etc/nginx/sites-enabled/default"
    
    # Create default web content
    create_default_web_content
    
    chmod 644 "$site_config"
    log_success "New default site created and enabled"
}

# Create default web content
create_default_web_content() {
    local web_root="/var/www/default"
    
    log_debug "Creating default web content"
    
    cat > "$web_root/index.html" << 'EOF'
<!DOCTYPE html>
<html>
<head>
    <title>Welcome to Nginx</title>
    <style>
        body {
            width: 35em;
            margin: 0 auto;
            font-family: Tahoma, Verdana, Arial, sans-serif;
        }
        .header {
            text-align: center;
            padding: 20px;
            background-color: #f0f0f0;
            border-radius: 5px;
            margin: 20px 0;
        }
        .info {
            background-color: #f9f9f9;
            padding: 15px;
            border-radius: 5px;
            margin: 20px 0;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>Welcome to Nginx!</h1>
        <p>Server is running successfully</p>
    </div>
    
    <div class="info">
        <h2>Server Information</h2>
        <p><strong>Status:</strong> Active</p>
        <p><strong>Configuration:</strong> Custom Setup</p>
        <p><strong>Security:</strong> Hardened</p>
    </div>
    
    <div class="info">
        <h2>Next Steps</h2>
        <ul>
            <li>Configure your domain and SSL certificates</li>
            <li>Upload your website files to <code>/var/www/html</code></li>
            <li>Configure additional virtual hosts as needed</li>
        </ul>
    </div>
</body>
</html>
EOF
    
    chown -R "$NGINX_USER:$WEBAPP_GROUP" "$web_root"
    log_success "Default web content created"
}

# Create maintenance site
create_maintenance_site() {
    log_info "Creating maintenance site"
    
    local maint_config="/etc/nginx/sites-available/maintenance"
    
    cat > "$maint_config" << 'EOF'
# Maintenance mode configuration
server {
    listen 80;
    listen [::]:80;
    
    root /var/www/maintenance;
    index index.html;
    
    server_name _;
    
    location / {
        try_files $uri $uri/ =503;
    }
    
    error_page 503 @maintenance;
    
    location @maintenance {
        rewrite ^(.*)$ /index.html last;
        break;
    }
}
EOF
    
    # Create maintenance content
    local maint_dir="/var/www/maintenance"
    create_directory "$maint_dir" "755" "$NGINX_USER" "$WEBAPP_GROUP"
    
    cat > "$maint_dir/index.html" << 'EOF'
<!DOCTYPE html>
<html>
<head>
    <title>Maintenance Mode</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            margin-top: 50px;
            background-color: #f5f5f5;
        }
        .container {
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
            background-color: white;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        h1 { color: #333; }
        p { color: #666; }
    </style>
</head>
<body>
    <div class="container">
        <h1>Site Under Maintenance</h1>
        <p>We're currently performing scheduled maintenance.</p>
        <p>Please check back soon.</p>
    </div>
</body>
</html>
EOF
    
    chown -R "$NGINX_USER:$WEBAPP_GROUP" "$maint_dir"
    chmod 644 "$maint_config"
    
    log_success "Maintenance site created"
}

# Configure log rotation
configure_log_rotation() {
    log_subsection "Configuring Log Rotation"
    
    local logrotate_config="/etc/logrotate.d/nginx"
    
    cat > "$logrotate_config" << 'EOF'
/var/log/nginx/*.log {
    daily
    missingok
    rotate 52
    compress
    delaycompress
    notifempty
    create 640 www-data adm
    sharedscripts
    prerotate
        if [ -d /etc/logrotate.d/httpd-prerotate ]; then \
            run-parts /etc/logrotate.d/httpd-prerotate; \
        fi \
    endscript
    postrotate
        invoke-rc.d nginx rotate >/dev/null 2>&1
    endscript
}
EOF
    
    chmod 644 "$logrotate_config"
    log_success "Log rotation configured"
}

# Test Nginx configuration
test_nginx_config() {
    log_info "Testing Nginx configuration"
    
    if nginx -t > /dev/null 2>&1; then
        log_success "Nginx configuration test passed"
        return 0
    else
        log_error "Nginx configuration test failed"
        nginx -t
        return 1
    fi
}

# Start and enable Nginx
start_and_enable_nginx() {
    log_subsection "Starting and Enabling Nginx"
    
    # Enable Nginx service
    if systemctl enable nginx > /dev/null 2>&1; then
        log_success "Nginx service enabled"
    else
        log_error "Failed to enable Nginx service"
        return 1
    fi
    
    # Start Nginx service
    if systemctl start nginx > /dev/null 2>&1; then
        log_success "Nginx service started"
    else
        log_error "Failed to start Nginx service"
        return 1
    fi
    
    # Wait for Nginx to be ready
    if wait_for_service "nginx" 30; then
        log_success "Nginx is running and ready"
    else
        log_error "Nginx failed to start properly"
        return 1
    fi
    
    # Test HTTP connection
    if wait_for_port "$HTTP_PORT" "localhost" 10; then
        log_success "Nginx is accepting HTTP connections"
    else
        log_error "Nginx is not accepting HTTP connections"
        return 1
    fi
}

# Verify Nginx setup
verify_nginx_setup() {
    log_subsection "Verifying Nginx Setup"
    
    # Test configuration
    if ! test_nginx_config; then
        log_error "Nginx configuration verification failed"
        return 1
    fi
    
    # Check service status
    if ! service_running "nginx"; then
        log_error "Nginx service is not running"
        return 1
    fi
    
    # Test HTTP response
    local response
    response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost/ 2>/dev/null || echo "000")
    
    if [[ "$response" == "200" ]]; then
        log_success "Nginx HTTP response test passed"
    else
        log_error "Nginx HTTP response test failed (HTTP $response)"
        return 1
    fi
    
    # Check log files
    local log_files=("/var/log/nginx/access.log" "/var/log/nginx/error.log")
    for log_file in "${log_files[@]}"; do
        if [[ -f "$log_file" ]] && [[ -w "$log_file" ]]; then
            log_success "Log file accessible: $log_file"
        else
            log_warn "Log file issue: $log_file"
        fi
    done
    
    log_success "Nginx setup verification completed"
}

# Module cleanup on exit
cleanup() {
    local exit_code=$?
    if [[ $exit_code -ne 0 ]]; then
        log_error "Nginx web server module failed with exit code: $exit_code"
        
        # Try to restore backup if available
        local nginx_conf="/etc/nginx/nginx.conf"
        local backup_files
        backup_files=$(find "$BACKUP_DIR" -name "nginx.conf.*.bak" 2>/dev/null | sort -r | head -1)
        
        if [[ -n "$backup_files" ]] && [[ -f "$backup_files" ]]; then
            log_info "Attempting to restore Nginx configuration from backup"
            cp "$backup_files" "$nginx_conf" 2>/dev/null || true
        fi
    fi
    exit $exit_code
}

# Set up signal handlers
trap cleanup EXIT

# Execute main function
main "$@"